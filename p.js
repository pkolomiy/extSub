const extSub=(a, pp)=>{const sb=a.split('\n\n').map(b=>b.split('\n')).map(c=>({p:c[0],tm:(()=>{const t=c[1].split(' --> ').map(d=> parseInt(d.split(':')[2].split(',')[1])+(1000*(parseInt(d.split(':')[2].split(',')[0])+(parseInt(d.split(':')[1])*60)+(parseInt(d.split(':')[0])*3600))));return{s:t[0],e:t[1]};})(),tx:c.splice(2).join('\n')}));
for(let i=0;i<sb.length;i++){sb[i].tm.e+=pp;if(i+1==sb.length||sb[i].tm.e<sb[i+1].tm.s)continue;const cc=sb[i].tm,nn=sb[i+1].tm;const dd=nn.e-nn.s;nn.s=cc.e+1;nn.e=nn.s+dd;}
return sb.map(g=>{const [st,ee]=[g.tm.s,g.tm.e].map(nn=>{let ms,ss,mm;ms=nn%1000;nn=(nn-ms)/1000;ss=nn%60;nn=(nn-ss)/60;mm=nn%60;nn=(nn-mm)/60;return`${nn}`.padStart(2,'0')+`:`+`${mm}`.padStart(2,'0')+`:`+`${ss}`.padStart(2,'0')+`,`+`${ms}`.padStart(3,'0');});return`${g.p}\n${st} --> ${ee}\n${g.tx}`;}).join('\n\n');}
